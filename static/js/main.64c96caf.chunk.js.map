{"version":3,"sources":["services/transform/transform.worker.ts","components/Orgs.tsx","components/AppBar.tsx","components/Paper.tsx","components/PaperTitle.tsx","utils/validation.ts","utils/storage.ts","services/orgs/orgs.repository.ts","services/orgs/orgs.service.ts","pages/Main.tsx","components/OrgAddEditDialog.tsx","components/OrgDeleteAlertDialog.tsx","services/transform/transform.service.ts","components/FileUploader.tsx","components/RegisterTransform.tsx","theme.ts","App.tsx","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","OrgTaskStatus","AppBar","position","Toolbar","Typography","variant","component","sx","flexGrow","Paper","styled","MuiPaper","padding","theme","spacing","PaperTitle","children","color","gutterBottom","Orgs","onAddOrgPressed","orgs","selectedOrgId","onOrgSelected","onDeleteRequested","onUpdateRequested","onFullResetRequested","handleDeleteButtonClick","orgId","e","stopPropagation","Box","display","justifyContent","mr","Button","startIcon","onClick","TableContainer","mb","Table","TableHead","TableRow","TableCell","align","TableBody","map","orgDescriptor","hover","id","selected","cursor","alignItems","fontSize","org","inn","npp","taskStatus","IDLE","Tooltip","title","IN_PROGRESS","DONE","ERROR","IconButton","textAlign","yup","mixed","required","message","this","matches","isDigits","test","value","Boolean","length","getN","index","parseInt","dgt11","dgt12","dgt10","EntitiesStorage","key","_key","json","localStorage","getItem","JSON","parse","data","stringify","setItem","OrgsRepository","_orgsStorage","storageKey","storeData","retreiveData","getOrgs","uuidv4","storeOrgs","TransformActionsTypes","OrgsService","_orgsRepository","getOrgById","create","update","remove","validationSchema","object","shape","string","isINN","api_key","number","integer","OrgAddEditDialogBody","onSaveOrAdd","onClose","isEditingForm","undefined","orgsService","React","useMemo","useState","editingOrg","setEditingOrg","apiKeyIsVisible","setApiKeyIsVisible","formik","useFormik","initialValues","onSubmit","values","enableReinitialize","useEffect","getById","dialogTitle","DialogTitle","handleSubmit","DialogContent","Grid","container","item","xs","TextField","fullWidth","label","onChange","handleChange","onBlur","handleBlur","error","touched","errors","helperText","autoComplete","FormControl","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","edge","FormHelperText","DialogActions","OrgAddEditDialog","open","bodyProps","Dialog","OrgDeleteAlertDialog","orgName","onDelete","TransformService","_tasks","taskId","sourceFile","a","taskWorker","createTransformWorker","transformRegister","resultFile","stopTransformationTask","terminate","FileUploader","onFileChange","disabled","fileName","setFileName","fileInputRef","useRef","size","marginRight","current","click","hidden","ref","file","target","files","accept","RegisterTransform","loading","onTransformRequested","onResetRequested","onCancelTaskRequested","setSourceFile","href","URL","createObjectURL","download","Divider","Alert","severity","AlertTitle","flexDirection","pt","pb","CircularProgress","transformReducer","state","action","RESET_ALL","SET_RESET","payload","SET_IN_PROGRESS","inProgress","SET_DONE","SET_ERROR","Main","transformService","useReducer","transformState","transformDispatch","getAll","setOrgs","Object","keys","setSelectedOrgId","orgIdForDelete","setOrgIdForDelete","orgDeleteDialogIsOpen","setOrgDeleteDialogIsOpen","orgCreateOrUpdateDialogIsOpen","setOrgCreateOrUpdateDialogIsOpen","orgIdForUpdate","setOrgIdForUpdate","orgRowsDescriptors","startTransformTask","startTransformationTask","updateOrgsList","createTheme","App","ThemeProvider","CssBaseline","Container","mt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64c96caf.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"transformRegister\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"b199b3db2ecec9d81f17.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React from 'react';\nimport Paper from '../components/Paper';\nimport Box from '@mui/material/Box';\nimport PaperTitle from '../components/PaperTitle';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport TableContainer from '@mui/material/TableContainer';\nimport Table from '@mui/material/Table';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Org } from '../services/orgs/orgs.interfaces';\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport HourglassTopIcon from '@mui/icons-material/HourglassTop';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nexport enum OrgTaskStatus {\n  IDLE, IN_PROGRESS, ERROR, DONE\n}\n\nexport interface OrgRowDescriptor {\n  org: Org,\n  id: string,\n  taskStatus: OrgTaskStatus\n}\n\ninterface Props {\n  onAddOrgPressed: () => void\n  orgs: OrgRowDescriptor[]\n  selectedOrgId: string\n  onOrgSelected: (id: string) => void\n  onDeleteRequested: (id: string) => void\n  onUpdateRequested: (id: string) => void\n  onFullResetRequested: () => void\n}\n\nconst Orgs: React.FC<Props> = ({\n  onAddOrgPressed,\n  orgs,\n  selectedOrgId,\n  onOrgSelected,\n  onDeleteRequested,\n  onUpdateRequested,\n  onFullResetRequested\n}) => {\n  const handleUpdateButtonClick = (orgId: string) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    onUpdateRequested(orgId);\n  }\n\n  const handleDeleteButtonClick = (orgId: string) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    onDeleteRequested(orgId);\n  }\n\n  return (\n    <Paper>\n      <PaperTitle>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Box component=\"span\" sx={{ mr: 2 }}>\n            Организации\n          </Box>\n          <Button\n            variant=\"outlined\"\n            startIcon={<AddIcon />}\n            color=\"success\"\n            onClick={() => onAddOrgPressed()}\n          >\n            Добавить\n          </Button>\n        </Box>\n      </PaperTitle>\n      <TableContainer sx={{ mb: 2 }}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell>\n                Название\n              </TableCell>\n              <TableCell>\n                ИНН\n              </TableCell>\n              <TableCell align=\"right\">\n                Номер реестра\n              </TableCell>\n              <TableCell align=\"center\">\n                Статус задачи\n              </TableCell>\n              <TableCell align=\"right\">Действия</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {orgs.map((orgDescriptor) => (\n              <TableRow\n                key={orgDescriptor.id}\n                hover\n                onClick={() => { onOrgSelected(orgDescriptor.id) }}\n                selected={orgDescriptor.id === selectedOrgId}\n                sx={{\n                  '&:hover': {\n                    cursor: 'pointer'\n                  }\n                }}>\n                <TableCell padding=\"none\">\n                  {orgDescriptor.id === selectedOrgId\n                    && <Box sx={{\n                      display: 'inline-flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      padding: '8px'\n                    }}>\n                      <DoubleArrowIcon color=\"primary\" fontSize=\"large\" />\n                    </Box>\n                  }\n                </TableCell>\n                <TableCell>\n                  {orgDescriptor.org.name}\n                </TableCell>\n                <TableCell>\n                  {orgDescriptor.org.inn}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {orgDescriptor.org.npp}\n                </TableCell>\n                <TableCell align=\"center\">\n                  {orgDescriptor.taskStatus === OrgTaskStatus.IDLE &&\n                    <Tooltip title=\"Задача не запущена\">\n                      <RadioButtonUncheckedIcon color=\"disabled\" />\n                    </Tooltip>\n                  }\n                  {orgDescriptor.taskStatus === OrgTaskStatus.IN_PROGRESS &&\n                    <Tooltip title=\"В процессе\">\n                      <HourglassTopIcon color=\"primary\" />\n                    </Tooltip>\n                  }\n                  {orgDescriptor.taskStatus === OrgTaskStatus.DONE &&\n                    <Tooltip title=\"Задача завершена\">\n                      <CheckCircleIcon color=\"success\" />\n                    </Tooltip>\n                  }\n                  {orgDescriptor.taskStatus === OrgTaskStatus.ERROR &&\n                    <Tooltip title=\"Ошибка\">\n                      <CancelIcon color=\"error\" />\n                    </Tooltip>\n                  }\n                </TableCell>\n                <TableCell padding=\"none\" align=\"right\">\n                  <Tooltip title={`Редактировать организацию \"${orgDescriptor.org.name}\"`}>\n                    <IconButton onClick={handleUpdateButtonClick(orgDescriptor.id)}>\n                      <EditIcon />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title={`Удалить организацию \"${orgDescriptor.org.name}\"`}>\n                    <IconButton color=\"error\" onClick={handleDeleteButtonClick(orgDescriptor.id)}>\n                      <DeleteIcon color=\"error\" />\n                    </IconButton>\n                  </Tooltip>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Box textAlign=\"right\">\n      <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => onFullResetRequested()}\n          >\n            Сбросить все результаты\n          </Button>\n      </Box>\n    </Paper>\n  );\n}\n\nexport default Orgs;\n","import React from 'react';\nimport {default as MuiAppBar} from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nconst AppBar: React.FC = () => (\n  <MuiAppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n        Reg2Reg - преобразование реестров\n      </Typography>\n    </Toolbar>\n  </MuiAppBar>\n);\n\nexport default AppBar;\n","import { default as MuiPaper } from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\n\nconst Paper = styled(MuiPaper)(({ theme }) => ({\n  padding: theme.spacing(2)\n}));\n\nexport default Paper;\n","import  React from 'react';\nimport Typography from '@mui/material/Typography';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst PaperTitle: React.FC<Props> = ({ children }) => {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {children}\n    </Typography>\n  );\n}\n\nexport default PaperTitle;\n","import * as yup from 'yup';\n\nyup.setLocale({\n  mixed: {\n    required: 'Обязательное поле'\n  }\n});\n\nyup.addMethod<yup.StringSchema>(yup.string, 'isDigits', function (message: string) {\n  return this.matches(/^\\d+$/, message);\n});\n\nyup.addMethod<yup.StringSchema>(yup.string, 'isINN', function () {\n  return this.isDigits('ИНН должент состоять только из цифр')\n    .test('innLength', 'ИНН должен состоять из 10-ти или 12-ти цифр', (value) => (\n      Boolean(value) && (value!.length === 10 || value!.length === 12)\n    ))\n    .test('innCheckSum', 'Некорректный ИНН', (value) => {\n      const getN = (index: number): number => (parseInt(value![index]));\n      if (value && value.length === 12) {\n        const dgt11 = ((\n          7 * getN(0) + 2 * getN(1) + 4 * getN(2) +\n          10 * getN(3) + 3 * getN(4) + 5 * getN(5) +\n          9 * getN(6) + 4 * getN(7) + 6 * getN(8) +\n          8 * getN(9)) % 11) % 10;\n\n        const dgt12 = ((\n          3 * getN(0) + 7 * getN(1) + 2 * getN(2) +\n          4 * getN(3) + 10 * getN(4) + 3 * getN(5) +\n          5 * getN(6) + 9 * getN(7) + 4 * getN(8) +\n          6 * getN(9) + 8 * getN(10)) % 11) % 10;\n\n        return (getN(10) === dgt11 && getN(11) === dgt12);\n      }\n\n      if (value && value.length === 10) {\n        const dgt10 = ((\n          2 * getN(0) + 4 * getN(1) + 10 * getN(2) +\n          3 * getN(3) + 5 * getN(4) + 9 * getN(5) +\n          4 * getN(6) + 6 * getN(7) + 8 * getN(8)\n        ) % 11) % 10;\n        return (getN(9) === dgt10);\n      }\n\n      return true;\n    });\n});\n\nexport default yup;\n","export type DataContainer<T> = { [k: string]: T };\n\nexport class EntitiesStorage<T> {\n  private _key: string;\n\n  constructor(key: string) {\n    this._key = key;\n  }\n\n  retreiveData(): DataContainer<T> {\n    const json = localStorage.getItem(this._key);\n\n    if (json === null) {\n      return {};\n    }\n  \n    return JSON.parse(json);\n  }\n\n  storeData(data: DataContainer<T>) {\n    const json = JSON.stringify(data);\n\n    localStorage.setItem(this._key, json);\n  }\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport { Org } from \"./orgs.interfaces\";\nimport { EntitiesStorage, DataContainer } from \"../../utils/storage\";\n\nexport type OrgsDataContainer = DataContainer<Org>;\n\nexport class OrgsRepository {\n  static storageKey = 'orgs';\n\n  private _orgsStorage = new EntitiesStorage<Org>(OrgsRepository.storageKey);\n\n  /**\n   * Сохранение списка организаций в local storage.\n   */\n   private storeOrgs(orgs: OrgsDataContainer) {\n    this._orgsStorage.storeData(orgs);\n  }\n\n  /**\n   * Получение списока организаций.\n   */\n  getOrgs(): OrgsDataContainer {\n    const orgs = this._orgsStorage.retreiveData();\n\n    return orgs\n  }\n\n\n  getOrgById(id: string): Org | undefined {\n    const orgs = this._orgsStorage.retreiveData();\n\n    return orgs[id];\n  }\n\n  /**\n   * Создание организации.\n   * @param org Организация.\n   */\n  create(org: Org) {\n    const orgs = this.getOrgs();\n\n    orgs[uuidv4()] = org;\n  \n    this.storeOrgs(orgs);\n  }\n  \n  /**\n   * Обновление организации.\n   * @param id ID организации.\n   * @param org Организация.\n   */\n  update(id: string, org: Org) {\n    const orgs = this.getOrgs();\n\n    orgs[id] = org;\n  \n    this.storeOrgs(orgs);\n  }\n  \n  /**\n   * Удаление организации из списка.\n   * @param id ID организации.\n   */\n  remove(id: string) {\n    const orgs = this.getOrgs();\n\n    delete orgs[id];\n  \n    this.storeOrgs(orgs);\n  }\n}\n","import { OrgsRepository } from \"./orgs.repository\"\nimport { Org } from \"./orgs.interfaces\";\n\n\nexport class OrgsService {\n  private _orgsRepository: OrgsRepository = new OrgsRepository();\n\n  /**\n   * Получение списка орагинизаций.\n   * @returns \n   */\n  getAll() {\n    return this._orgsRepository.getOrgs();\n  }\n\n  /**\n   * Получение органиации по идетификтору.\n   * @param id ID организации в списке.\n   */\n  getById(id: string) {\n    return this._orgsRepository.getOrgById(id);\n  }\n\n  /**\n   * Создание организации.\n   * @param org Организация.\n   */\n  create(org: Org) {\n    this._orgsRepository.create(org);\n  }\n\n  /**\n   * Обновление организации.\n   * @param id ID организации в списке.\n   * @param org Организация.\n   */\n  update(id: string, org: Org) {\n    this._orgsRepository.update(id, org)\n  }\n\n  /**\n   * Удаление организации из списка.\n   * @param id ID организации в списке.\n   */\n  remove(id: string) {\n    this._orgsRepository.remove(id);\n  }\n}","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Grid from '@mui/material/Grid';\nimport Orgs, { OrgRowDescriptor, OrgTaskStatus } from '../components/Orgs';\nimport OrgAddEditDialog from '../components/OrgAddEditDialog';\nimport OrgDeleteAlertDialog from '../components/OrgDeleteAlertDialog';\nimport { OrgsService } from '../services/orgs/orgs.service';\nimport { TransformService } from '../services/transform/transform.service';\nimport RegisterTransform from '../components/RegisterTransform';\n\n\ninterface TransformCurrentState {\n  inProgress: boolean\n  taskId: string\n  resultFile?: File\n  error?: string\n}\n\nenum TransformActionsTypes {\n  SET_RESET, RESET_ALL, SET_IN_PROGRESS, SET_DONE, SET_ERROR\n}\n\ninterface TransformAction {\n  type: TransformActionsTypes,\n  payload?: {\n    orgId: string\n    resultFile?: File\n    error?: string\n    taskId?: string\n  }\n}\n\ntype TransformState = { [k: string]: TransformCurrentState };\n\nconst transformReducer = (state: TransformState, action: TransformAction) => {\n  switch (action.type) {\n    case TransformActionsTypes.RESET_ALL:\n      return {};\n    case TransformActionsTypes.SET_RESET:\n      const { [action.payload!.orgId!]: _, ...restTransformStates } = state;\n      return restTransformStates;\n    case TransformActionsTypes.SET_IN_PROGRESS:\n      return {\n        ...state, [action.payload!.orgId!]: {\n          inProgress: true,\n          taskId: action.payload!.taskId!\n        }\n      }\n    case TransformActionsTypes.SET_DONE:\n      return {\n        ...state,\n        [action.payload!.orgId!]:\n          { \n            inProgress: false, \n            resultFile: action.payload!.resultFile!,\n            taskId: state[action.payload!.orgId!].taskId\n          }\n      }\n    case TransformActionsTypes.SET_ERROR:\n      return {\n        ...state,\n        [action.payload!.orgId!]:\n          { \n            inProgress: false, \n            error: action.payload!.error!,\n            taskId: state[action.payload!.orgId!].taskId\n          }\n      }\n    default:\n      return state;\n  }\n}\n\nconst Main: React.FC = () => {\n  const orgsService = React.useMemo(() => new OrgsService(), []);\n  const transformService = React.useMemo(() => new TransformService(), []);\n\n  const [transformState, transformDispatch] = React.useReducer(transformReducer, {});\n\n  const [orgs, setOrgs] = React.useState(orgsService.getAll());\n  const [selectedOrgId, setSelectedOrgId] = React.useState(Object.keys(orgs)[0]);\n\n  const [orgIdForDelete, setOrgIdForDelete] = React.useState<string>();\n  const [orgDeleteDialogIsOpen, setOrgDeleteDialogIsOpen] = React.useState(false);\n\n  const [orgCreateOrUpdateDialogIsOpen, setOrgCreateOrUpdateDialogIsOpen] = React.useState(false);\n\n  const [orgIdForUpdate, setOrgIdForUpdate] = React.useState<string>();\n\n  const orgRowsDescriptors = React.useMemo(() => (Object.keys(orgs).map((orgId) => ({\n    org: orgs[orgId],\n    id: orgId,\n    taskStatus: !transformState[orgId] ? OrgTaskStatus.IDLE :\n    transformState[orgId].inProgress ? OrgTaskStatus.IN_PROGRESS :\n    transformState[orgId].resultFile ? OrgTaskStatus.DONE : OrgTaskStatus.ERROR\n  } as OrgRowDescriptor))), [orgs, transformState])\n\n  const startTransformTask = async (sourceFile: File) => {\n    const orgId = selectedOrgId;\n    const taskId = uuidv4();\n\n    transformDispatch({\n      type: TransformActionsTypes.SET_IN_PROGRESS,\n      payload: {\n        taskId,\n        orgId\n      }\n    });\n\n    try {\n      const resultFile = await transformService.startTransformationTask(taskId, sourceFile, orgs[selectedOrgId]);\n\n      transformDispatch({\n        type: TransformActionsTypes.SET_DONE,\n        payload: {\n          resultFile,\n          orgId\n        }\n      });\n\n    } catch (e: any) {\n      transformDispatch({\n        type: TransformActionsTypes.SET_ERROR,\n        payload: {\n          error: e.message,\n          orgId\n        }\n      });\n\n    }\n  }\n\n  const handleTransformResultReset = () => {\n    transformDispatch({\n      type: TransformActionsTypes.SET_RESET,\n      payload: {\n        orgId: selectedOrgId\n      }\n    });\n  }\n\n  const updateOrgsList = () => {\n    const orgs = orgsService.getAll();\n    setOrgs(orgs);\n  }\n\n  const handleAddOrgsPressed = () => {\n    setOrgIdForUpdate(undefined);\n    setOrgCreateOrUpdateDialogIsOpen(true);\n  };\n\n  const handleOrgModalClose = () => {\n    setOrgCreateOrUpdateDialogIsOpen(false);\n  };\n\n  const handleOrgModelSaveOrAdd = () => {\n    setOrgCreateOrUpdateDialogIsOpen(false);\n    updateOrgsList();\n  }\n\n  const handleOrgSelection = (id: string) => {\n    setSelectedOrgId(id);\n  }\n\n  const handleOrgDeletionAlertClose = () => {\n    setOrgDeleteDialogIsOpen(false);\n  }\n  const handleOrgDeletionAlertDelete = () => {\n    updateOrgsList();\n    setOrgDeleteDialogIsOpen(false);\n  }\n\n  const handleDeleteRequest = (orgId: string) => {\n    setOrgIdForDelete(orgId);\n    setOrgDeleteDialogIsOpen(true);\n  }\n\n  const handleUpdateRequest = (orgId: string) => {\n    setOrgIdForUpdate(orgId);\n    setOrgCreateOrUpdateDialogIsOpen(true);\n  }\n\n  const handleFullReset = () => {\n    transformDispatch({\n      type: TransformActionsTypes.RESET_ALL,\n    });\n  }\n\n  const handleCancelTask = () => {\n    transformService.stopTransformationTask(transformState[selectedOrgId].taskId);\n\n    transformDispatch({\n      type: TransformActionsTypes.SET_RESET,\n      payload: {\n        orgId: selectedOrgId\n      }\n    });\n  }\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item xs={8}>\n          <Orgs\n            onAddOrgPressed={handleAddOrgsPressed}\n            orgs={orgRowsDescriptors}\n            selectedOrgId={selectedOrgId}\n            onOrgSelected={handleOrgSelection}\n            onDeleteRequested={handleDeleteRequest}\n            onUpdateRequested={handleUpdateRequest}\n            onFullResetRequested={handleFullReset}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <RegisterTransform\n            key={selectedOrgId}\n            loading={transformState[selectedOrgId] ? transformState[selectedOrgId].inProgress : false}\n            resultFile={transformState[selectedOrgId]?.resultFile}\n            error={transformState[selectedOrgId]?.error}\n            onTransformRequested={startTransformTask}\n            onResetRequested={handleTransformResultReset}\n            onCancelTaskRequested={handleCancelTask}\n          />\n        </Grid>\n      </Grid>\n      <OrgAddEditDialog\n        orgId={orgIdForUpdate}\n        open={orgCreateOrUpdateDialogIsOpen}\n        onClose={handleOrgModalClose}\n        onSaveOrAdd={handleOrgModelSaveOrAdd}\n      />\n      <OrgDeleteAlertDialog\n        open={orgDeleteDialogIsOpen}\n        orgId={orgIdForDelete}\n        orgName={orgIdForDelete && orgs[orgIdForDelete] && orgs[orgIdForDelete].name}\n        onClose={handleOrgDeletionAlertClose}\n        onDelete={handleOrgDeletionAlertDelete}\n      />\n    </>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport yup from '../utils/validation';\nimport { useFormik } from \"formik\";\nimport { Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport { OrgsService } from '../services/orgs/orgs.service';\nimport { Org } from '../services/orgs/orgs.interfaces';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport IconButton from '@mui/material/IconButton';\nimport FormControl from '@mui/material/FormControl';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Visibility from '@mui/icons-material/Visibility'\nimport AddIcon from '@mui/icons-material/Add';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\nimport Button from '@mui/material/Button';\nimport SaveIcon from '@mui/icons-material/Save';\nimport Grid from '@mui/material/Grid';\n\ninterface OrgAddEditDialogBodyProps {\n  orgId?: string\n  onClose: () => void\n  onSaveOrAdd: () => void\n}\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required(),\n  inn: yup.string().required().isINN(),\n  api_key: yup.string().required(),\n  npp: yup.number().integer().required()\n});\n\nconst OrgAddEditDialogBody: React.FC<OrgAddEditDialogBodyProps> = ({\n  orgId,\n  onSaveOrAdd,\n  onClose,\n}) => {\n  const isEditingForm = orgId !== undefined;\n\n  const orgsService = React.useMemo(() => new OrgsService(), []);\n  const [editingOrg, setEditingOrg] = React.useState<Org>();\n  const [apiKeyIsVisible, setApiKeyIsVisible] = React.useState(false);\n\n  const formik = useFormik({\n    initialValues: editingOrg || {\n      name: '',\n      inn: '',\n      api_key: '',\n      npp: 1\n    } as Org,\n    validationSchema,\n    onSubmit: (values) => {\n      if (isEditingForm) {\n        orgsService.update(orgId, values);\n      } else {\n        orgsService.create(values)\n      }\n      onSaveOrAdd();\n    },\n    enableReinitialize: true\n  })\n\n  React.useEffect(() => {\n    if (orgId) {\n      const org = orgsService.getById(orgId);\n      setEditingOrg(org);\n    }\n  }, [orgId, orgsService]);\n\n  const handleClickShowApiKey = () => setApiKeyIsVisible(!apiKeyIsVisible);\n\n  const dialogTitle = !isEditingForm \n    ? 'Добавление организации' \n    : `Изменение организации \"${editingOrg && editingOrg.name}\"`;\n\n  return (\n    <>\n      <DialogTitle>\n        {dialogTitle}\n      </DialogTitle>\n      <form onSubmit={formik.handleSubmit}>\n        <DialogContent>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"org.name\"\n                name=\"name\"\n                label=\"Название\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={(formik.touched.name && formik.errors.name) || ' '}\n                autoComplete=\"off\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"org.inn\"\n                name=\"inn\"\n                label=\"ИНН\"\n                value={formik.values.inn}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.inn && Boolean(formik.errors.inn)}\n                helperText={(formik.touched.inn && formik.errors.inn) || ' '}\n                autoComplete=\"off\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl variant=\"outlined\" fullWidth>\n                <InputLabel htmlFor=\"org.api_key\">Ключ API</InputLabel>\n                <OutlinedInput\n                  type={apiKeyIsVisible ? 'text' : 'password'}\n                  id=\"org.api_keu\"\n                  name=\"api_key\"\n                  label=\"Ключ API\"\n                  value={formik.values.api_key}\n                  onBlur={formik.handleBlur}\n                  onChange={formik.handleChange}\n                  error={formik.touched.api_key && Boolean(formik.errors.api_key)}\n                  autoComplete=\"off\"\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={handleClickShowApiKey}\n                        edge=\"end\"\n                      >\n                        {apiKeyIsVisible ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n                <FormHelperText error={formik.touched.api_key && Boolean(formik.errors.api_key)}>\n                  {(formik.touched.api_key && formik.errors.api_key) || ' '}\n                </FormHelperText>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                type=\"number\"\n                fullWidth\n                variant=\"outlined\"\n                name=\"npp\"\n                label=\"Порядковый номер реестра\"\n                value={formik.values.npp}\n                onBlur={formik.handleBlur}\n                onChange={formik.handleChange}\n                error={formik.touched.npp && Boolean(formik.errors.npp)}\n                helperText={(formik.touched.npp && formik.errors.npp) || 'Будет указываться в названии реестра'}\n                autoComplete=\"off\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose}>\n            Отмена\n          </Button>\n          <Button\n            type=\"submit\"\n            color=\"success\"\n            startIcon={!isEditingForm ? <AddIcon /> : <SaveIcon />}\n          >\n            {!isEditingForm ? 'Добавить' : 'Сохранить'}\n          </Button>\n        </DialogActions>\n      </form>\n    </>\n  );\n};\n\ninterface OrgAddEditDialogProps extends OrgAddEditDialogBodyProps {\n  open: boolean\n};\n\nconst OrgAddEditDialog: React.FC<OrgAddEditDialogProps> = ({ open, onClose, ...bodyProps }) => (\n  <Dialog open={open} onClose={onClose}>\n    <OrgAddEditDialogBody onClose={onClose} {...bodyProps}/>\n  </Dialog>\n)\n\nexport default OrgAddEditDialog;\n","import React from 'react';\nimport { Dialog, DialogTitle, DialogActions } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { OrgsService } from '../services/orgs/orgs.service';\n\ninterface Props {\n  open: boolean\n  orgName?: string\n  orgId?: string\n  onClose: () => void\n  onDelete: () => void\n}\n\nconst OrgDeleteAlertDialog: React.FC<Props> = ({\n  open,\n  orgName,\n  orgId,\n  onClose,\n  onDelete\n}) => {\n  const orgsService = React.useMemo(() => new OrgsService(), []);\n\n  const handleDelete = () => {\n    orgsService.remove(orgId!);\n    onDelete();\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>\n        Вы уверены что хотите удалить организацию \"{orgName}\"?\n      </DialogTitle>\n      <DialogActions>\n        <Button onClick={onClose}>Отмена</Button>\n        <Button\n          startIcon={<DeleteIcon/>}\n          color=\"error\"\n          onClick={handleDelete}\n          >Удалить</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default OrgDeleteAlertDialog;\n","import { Org } from \"../orgs/orgs.interfaces\";\nimport * as TransformWorkerLocal from './transform.worker';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport createTransformWorker from 'workerize-loader!./transform.worker';\n\n\nexport class TransformService {\n  private _tasks: { [k: string]: ReturnType<typeof createTransformWorker> } = {};\n\n  async startTransformationTask(taskId: string, sourceFile: File, org: Org): Promise<File> {\n    const taskWorker = createTransformWorker<typeof TransformWorkerLocal>();\n    this._tasks[taskId] = taskWorker;\n\n    const resultFile = await taskWorker.transformRegister(sourceFile, org);\n\n    this.stopTransformationTask(taskId);\n\n    return resultFile;\n  }\n\n  stopTransformationTask(taskId: string) {\n    if (this._tasks[taskId] !== undefined) {\n      const taskWorker = this._tasks[taskId];\n      taskWorker.terminate();\n\n      delete this._tasks[taskId];\n    }\n  }\n}\n","import React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport IconButton from '@mui/material/IconButton';\nimport ClearIcon from '@mui/icons-material/Clear';\n\ninterface Props {\n  onFileChange: (file?: File | null) => void\n  disabled: boolean\n}\n\nconst FileUploader: React.FC<Props> = ({ onFileChange, disabled }) => {\n  const [fileName, setFileName] = React.useState<string>();\n  const fileInputRef = React.useRef() as React.MutableRefObject<HTMLInputElement>;\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files && e.target.files[0];\n    setFileName(file?.name);\n    onFileChange(file);\n  }\n\n  const handleUploadClick = () => {\n    fileInputRef.current.click();\n  }\n\n  const handleFileInputClean = () => {\n    setFileName(undefined);\n    fileInputRef.current.value = '';\n    onFileChange(null);\n  }\n\n  return (\n    <Box sx={{\n      display: 'flex',\n      alignItems: 'center'\n    }}>\n      <TextField\n        disabled\n        fullWidth\n        variant=\"outlined\"\n        value={fileName || 'Файл не выбран'}\n        label=\"Файл исходного реестра\"\n        size=\"small\"\n        sx={(theme) => ({\n          flexGrow: 1,\n          marginRight: theme.spacing(1)\n        })}\n      />\n      {\n        fileName\n          ?\n          <IconButton\n            size=\"large\"\n            color=\"error\"\n            onClick={handleFileInputClean}\n            disabled={disabled}\n          >\n            <ClearIcon />\n          </IconButton>\n          :\n          <IconButton\n            onClick={handleUploadClick}\n            size=\"large\"\n            disabled={disabled}\n          >\n            <CloudUploadIcon />\n          </IconButton>\n      }\n      <input\n        type=\"file\"\n        hidden\n        ref={fileInputRef}\n        onChange={handleFileInputChange}\n        accept=\".xls,.xlsx\"\n      />\n    </Box>\n  )\n}\n\nexport default FileUploader;\n","import React from 'react';\nimport FileUploader from './FileUploader';\nimport Paper from './Paper';\nimport Box from '@mui/material/Box';\nimport PaperTitle from './PaperTitle';\nimport ArticleIcon from '@mui/icons-material/Article';\nimport Button from '@mui/material/Button';\nimport CachedIcon from '@mui/icons-material/Cached';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\n\ninterface Props {\n  loading: boolean\n  resultFile?: File\n  error?: string\n  onTransformRequested: (sourceFile: File) => void\n  onResetRequested: () => void\n  onCancelTaskRequested: () => void\n}\n\nconst RegisterTransform: React.FC<Props> = ({\n  loading,\n  resultFile,\n  error,\n  onTransformRequested,\n  onResetRequested,\n  onCancelTaskRequested\n}) => {\n  const [sourceFile, setSourceFile] = React.useState<File | null>();\n\n  const handleSourceFileChange = (file?: File | null) => {\n    setSourceFile(file);\n  }\n\n  return (\n    <Paper>\n      <Box sx={{ mb: 2 }}>\n        <PaperTitle>\n          <Box sx={{\n            display: 'flex',\n            alignItems: 'center'\n          }}>\n            <ArticleIcon color=\"primary\" sx={{ mr: 2 }} />\n            Формирование реестра\n          </Box>\n        </PaperTitle>\n      </Box>\n      {!loading && !resultFile && !error &&\n        <>\n          <Box sx={{ mb: 2 }}>\n            <FileUploader disabled={loading} onFileChange={handleSourceFileChange} />\n          </Box>\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            startIcon={<CachedIcon />}\n            size=\"large\"\n            disabled={!Boolean(sourceFile)}\n            onClick={() => onTransformRequested(sourceFile!)}\n          >\n            Начать преобразование\n          </Button>\n        </>\n      }\n      {(resultFile || error) &&\n        <>\n          {resultFile &&\n            <>\n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle1\">\n                  Файл результата: <strong>{resultFile!.name}</strong>\n                </Typography>\n              </Box>\n              <Box sx={{ mb: 2 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"success\"\n                  fullWidth\n                  startIcon={<DownloadIcon />}\n                  size=\"large\"\n                  href={URL.createObjectURL(resultFile!)}\n                  download={resultFile.name}\n                >\n                  Скачать\n                </Button>\n              </Box>\n              <Box sx={{ mb: 2 }}>\n                <Divider />\n              </Box>\n            </>\n          }\n          {error &&\n            <Box sx={{ mb: 2 }}>\n              <Alert severity=\"error\">\n                <AlertTitle>Ошибка!</AlertTitle>\n                {error}\n              </Alert>\n            </Box>\n          }\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            fullWidth\n            onClick={onResetRequested}\n          >\n            Сбросить результат\n          </Button>\n        </>\n      }\n      {loading &&\n        <Box sx={{\n          display: 'flex',\n          alignItems: 'center',\n          flexDirection: 'column',\n        }}>\n          <Box sx={{\n            pt: 3,\n            pb: 4,\n          }}>\n            <CircularProgress size={60} />\n          </Box>\n          <Button variant=\"outlined\" color=\"error\" onClick={onCancelTaskRequested}>\n            Отменить\n          </Button>\n        </Box>\n      }\n    </Paper>\n  )\n}\n\nexport default RegisterTransform;\n","import { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme();\n\nexport default theme;\n","import React from 'react';\nimport AppBar from './components/AppBar';\nimport Main from './pages/Main';\nimport { ThemeProvider } from '@mui/material/styles';\nimport theme from './theme';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container'\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar />\n      <Container sx={{mb: 4, mt: 4}}>\n        <Main />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}